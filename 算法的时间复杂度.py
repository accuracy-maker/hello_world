int i = 1;
int j = 2;
++i;
j++;
int m = i + j;
#只要没有循环，算法的时间复杂度就为O（1）
for(i=1; i<=n; ++i)
{
   j = i;
   j++;
}
#循环中i变量的值不会发生跳变，会执行n次所以时间复杂度为O(n)
int i = 1;
while(i<n)
{
    i = i * 2;
}
#这段代码中循环中i的值发生跳变，在while循环里面，每次都将 i 乘以 2，乘完之后，i 距离 n 就越来越近了。我们试着求解一下，假设循环x次之后，i 就大于 2 了，此时这个循环就退出了，也就是说 2 的 x 次方等于 n，那么 x = log2^n
#也就是说当循环 log2^n 次以后，这个代码就结束了。因此这个代码的时间复杂度为：O(logn)
for(m=1; m<n; m++)
{
    i = 1;
    while(i<n)
    {
        i = i * 2;
    }
}
#线性对数阶O(nlogN)，将时间复杂度为O(logn)的代码循环N遍的话，那么它的时间复杂度就是 n * O(logN)，也就是了O(nlogN)。
for(x=1; i<=n; x++)
{
   for(i=1; i<=n; i++)
    {
       j = i;
       j++;
    }
}
#平方阶O(n²) 就更容易理解了，如果把 O(n) 的代码再嵌套循环一遍，它的时间复杂度就是 O(n²) 了。
